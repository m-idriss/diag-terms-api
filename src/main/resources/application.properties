# Configuring the Application information
quarkus.application.name=diag-terms-api
quarkus.application.version=1.0
quarkus.http.port=${PORT:8082}

# terms service URL for REST Client
term-service/mp-rest/url=${TERMS_SERVICE_URL:http://localhost:8083}

# The Kafka broker location
mp.messaging.connector.smallrye-kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
mp.messaging.connector.smallrye-kafka.group.id=diag-terms-group
# Configuring the outgoing channel (writing to Kafka)
mp.messaging.outgoing.terms-out.connector=smallrye-kafka
mp.messaging.outgoing.terms-out.topic=terms
mp.messaging.outgoing.terms-out.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.terms-out.value.serializer=org.apache.kafka.common.serialization.StringSerializer
# Configuring the incoming channel (reading from Kafka)
#mp.messaging.incoming.terms-in.connector=smallrye-kafka
#mp.messaging.incoming.terms-in.topic=terms
#mp.messaging.incoming.terms-in.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#mp.messaging.incoming.terms-in.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
quarkus.kafka.devservices.enabled=true
%prod.quarkus.kafka.devservices.enabled=false
# Enable Swagger UI
# Stylish see https://quarkus.io/blog/stylish-api/
quarkus.swagger-ui.deep-linking=false
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=Diag ${quarkus.application.name} with Quarkus
quarkus.swagger-ui.path=/api
quarkus.swagger-ui.footer=&#169; 2024. This is a Microservice ${quarkus.application.name} by 3dime.
quarkus.swagger-ui.default-models-expand-depth=-1
quarkus.swagger-ui.enable=true
quarkus.swagger-ui.display-request-duration=true
quarkus.swagger-ui.filter=true
# Enable OpenAPI
quarkus.smallrye-openapi.info-title=Diag : ${quarkus.application.name} with Quarkus
quarkus.smallrye-openapi.info-description=This is a Microservice ${quarkus.application.name} based on the OpenAPI 3.0 specification. Click [here](https://github.com/m-idriss/${quarkus.application.name}). You can load via the `Code > Clone`, enjoy."
quarkus.smallrye-openapi.info-version=1.0
quarkus.smallrye-openapi.info-contact-name=Idriss
quarkus.smallrye-openapi.info-contact-url=https://github.com/m-idriss
quarkus.smallrye-openapi.info-contact-email=contact@3dime.com
quarkus.smallrye-openapi.info-license-url=https://opensource.org/licenses/mit-license.php
quarkus.smallrye-openapi.info-license-name=MIT
quarkus.smallrye-openapi.auto-add-server=true
# Main OpenAPI group
quarkus.smallrye-openapi.path=/openapi
quarkus.smallrye-openapi.management.enabled=true
# Enable Health
quarkus.smallrye-health.root-path=/api/health
quarkus.smallrye-health.openapi.included=true
quarkus.kafka.health.enabled=true
# Enable Container Image
quarkus.container-image.build=true
quarkus.container-image.group=dime
quarkus.container-image.name=${quarkus.application.name}
quarkus.container-image.tag=latest
quarkus.jib.ports=${quarkus.http.port}
quarkus.jib.platforms=linux/arm64,linux/amd64
quarkus.messaging.metrics.enabled=true
quarkus.smallrye-health.extensions.enabled=true
quarkus.smallrye-health.ui.always-include=true
# Enable metrics collection
smallrye.messaging.metrics.micrometer.enabled=true
smallrye.messaging.metrics.mp.enabled=true
# Enable JVM and system metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.binder.http-server.enabled=true
quarkus.micrometer.export.json.enabled=true
quarkus.micrometer.export.json.path=metrics/json
quarkus.micrometer.export.prometheus.path=metrics/prometheus
quarkus.log.metrics.enabled=true
quarkus.micrometer.export.prometheus.enabled=true
# Enable REST Client
quarkus.rest-client.wordsapi.url=https://wordsapiv1.p.rapidapi.com
quarkus.rest-client.wordsapi.headers.x-rapidapi-host=wordsapiv1.p.rapidapi.com
quarkus.rest-client.wordsapi.headers.x-rapidapi-key=${WORDS_API_KEY}
